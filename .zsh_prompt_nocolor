# vim:ft=zsh ts=2 sw=2 sts=2
#
# A modified prompt for compatibility.
# Works without Powerline fonts and Unicode support due to only using
# ASCII characters.
# Uses colours.
#
# Original from Oh My Zsh (https://github.com/robbyrussell/oh-my-zsh):
# agnoster's Theme - https://gist.github.com/3712874
# A Powerline-inspired theme for ZSH
#
# # README
#
# In addition, I recommend the
# [Solarized theme](https://github.com/altercation/solarized/) and, if you're
# using it on Mac OS X, [iTerm 2](https://iterm2.com/) over Terminal.app -
# it has significantly better color fidelity.
#
# If using with "light" variant of the Solarized color schema, set
# SOLARIZED_THEME variable to "light". If you don't specify, we'll assume
# you're using the "dark" variant.
#
# # Goals
#
# The aim of this theme is to only show you *relevant* information. Like most
# prompts, it will only show git information when in a git working directory.
# However, it goes a step further: everything from the current user and
# hostname to whether the last call exited with an error to whether background
# jobs are running in this shell will all be displayed automatically when
# appropriate.

### Segment drawing
# A few utility functions to make it easy and re-usable to draw segmented prompts

# Special Powerline characters

() {
    local LC_ALL="" LC_CTYPE="en_US.UTF-8"
    # NOTE: This segment separator character is correct.  In 2012, Powerline changed
    # the code points they use for their special characters. This is the new code point.
    # If this is not working for you, you probably have an old version of the
    # Powerline-patched fonts installed. Download and install the new version.
    # Do not submit PRs to change this unless you have reviewed the Powerline code point
    # history and have new information.
    # This is defined using a Unicode escape sequence so it is unambiguously readable, regardless of
    # what font the user is viewing this source code in. Do not replace the
    # escape sequence with a single literal character.
    # Do not change this! Do not make it '\u2b80'; that is the old, wrong code point.
    SEGMENT_SEPARATOR=$''
}

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
    [[ -n $1 ]] && echo -n $1
}

# End the prompt, closing any open segments
prompt_end() {
    echo -n "%#"
}

### Prompt components
# Each component will draw itself, and hide itself if no information needs to be shown

# Context: user@hostname (who am I and where am I)
prompt_context() {
    if [[ "$USER" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
        prompt_segment "%(!..)%n@%m "
    fi
}

# From https://lobste.rs/s/x5ioqm/what_does_your_shell_prompt_look_like#c_eejehg
function git_stash_count() {
    count=$(git stash list 2> /dev/null | wc -l) || return
    if [[ $count -gt 0 ]]; then
        echo -n " (${count})"
    fi
}

# Git: branch/detached head, dirty status
prompt_git() {
    (( $+commands[git] )) || return
    if [[ "$(git config --get oh-my-zsh.hide-status 2>/dev/null)" = 1 ]]; then
        return
    fi
    local PL_BRANCH_CHAR
    () {
        local LC_ALL="" LC_CTYPE="en_US.UTF-8"
        PL_BRANCH_CHAR=$'b'
    }
    local ref dirty mode repo_path

    if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
        repo_path=$(git rev-parse --git-dir 2>/dev/null)
        dirty=$(parse_git_dirty)
        ref=$(git symbolic-ref HEAD 2> /dev/null) || ref="> $(git rev-parse --short HEAD 2> /dev/null)"
        st=''
        if [[ -n $dirty ]]; then
            st='d '
        fi

        if [[ -e "${repo_path}/BISECT_LOG" ]]; then
            mode=" <B>"
        elif [[ -e "${repo_path}/MERGE_HEAD" ]]; then
            mode=" >M<"
        elif [[ -e "${repo_path}/rebase" || -e "${repo_path}/rebase-apply" || -e "${repo_path}/rebase-merge" || -e "${repo_path}/../.dotest" ]]; then
            mode=" >R>"
        fi

        setopt promptsubst
        autoload -Uz vcs_info

        zstyle ':vcs_info:*' enable git
        zstyle ':vcs_info:*' get-revision true
        zstyle ':vcs_info:*' check-for-changes true
        zstyle ':vcs_info:*' stagedstr '+'
        zstyle ':vcs_info:*' unstagedstr 'm'
        zstyle ':vcs_info:*' formats ' %u%c'
        zstyle ':vcs_info:*' actionformats ' %u%c'
        vcs_info
        echo -n "[${st}${ref/refs\/heads\//$PL_BRANCH_CHAR }${vcs_info_msg_0_%% }${mode}"
        git_stash_count
        echo -n "] "
    fi
}

prompt_bzr() {
    (( $+commands[bzr] )) || return
    if (bzr status >/dev/null 2>&1); then
        status_mod=`bzr status | head -n1 | grep "modified" | wc -m`
        status_all=`bzr status | head -n1 | wc -m`
        revision=`bzr log | head -n2 | tail -n1 | sed 's/^revno: //'`
        if [[ $status_mod -gt 0 ]] ; then
            echo -n "bzr@"$revision "+ "
        else
            if [[ $status_all -gt 0 ]] ; then
                echo -n "bzr@"$revision" "
            else
                echo -n "bzr@"$revision" "
            fi
        fi
    fi
}

prompt_hg() {
    (( $+commands[hg] )) || return
    local rev st branch
    if $(hg id >/dev/null 2>&1); then
        if $(hg prompt >/dev/null 2>&1); then
            if [[ $(hg prompt "{status|unknown}") = "?" ]]; then
                # if files are not added
                st='!'
            elif [[ -n $(hg prompt "{status|modified}") ]]; then
                # if any modification
                st='m'
            else
                # if working copy is clean
                st='c'
            fi
            echo -n $(hg prompt "m {rev}@{branch}") $st
        else
            st=""
            rev=$(hg id -n 2>/dev/null | sed 's/[^-0-9]//g')
            branch=$(hg id -b 2>/dev/null)
            if `hg st | grep -q "^\?"`; then
                st='!'
            elif `hg st | grep -q "^[MA]"`; then
                st='m'
            else
                st='c'
            fi
            echo -n "m $rev@$branch" $st
        fi
        echo -n ' '
    fi
}

# Dir: current working directory
prompt_dir() {
    prompt_segment '%~ '
}

# Virtualenv: current working virtualenv
prompt_virtualenv() {
    local virtualenv_path="$VIRTUAL_ENV"
    if [[ -n $virtualenv_path && -n $VIRTUAL_ENV_DISABLE_PROMPT ]]; then
        prompt_segment "(`basename $virtualenv_path`) "
    fi
}

# Status:
# - was there an error
# - am I root
# - are there background jobs?
prompt_status() {
    local -a symbols

    [[ $RETVAL -ne 0 ]] && symbols+="x"
    [[ $UID -eq 0 ]] && symbols+="r"
    [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="j"

    [[ -n "$symbols" ]] && prompt_segment "$symbols "
}

#AWS Profile:
# - display current AWS_PROFILE name
# - displays yellow on red if profile name contains 'production' or
#   ends in '-prod'
# - displays black on green otherwise
prompt_aws() {
    [[ -z "$AWS_PROFILE" ]] && return
    case "$AWS_PROFILE" in
        *-prod|*production*) prompt_segment "AWS: $AWS_PROFILE " ;;
        *) prompt_segment "AWS: $AWS_PROFILE " ;;
    esac
}

## Main prompt
build_prompt() {
    RETVAL=$?
    prompt_status
    prompt_virtualenv
    prompt_aws
    prompt_context
    prompt_dir
    prompt_git
    prompt_bzr
    prompt_hg
    prompt_end
}

if ! [ -f $ZSH/oh-my-zsh.sh ]; then
    setopt PROMPT_SUBST
    function parse_git_dirty() {
        local STATUS
        local -a FLAGS
        FLAGS=('--porcelain' '--ignore-submodules=dirty')
        if [[ "$(command git config --get oh-my-zsh.hide-dirty)" != "1" ]]; then
            if [[ "$DISABLE_UNTRACKED_FILES_DIRTY" == "true" ]]; then
                FLAGS+='--untracked-files=no'
            fi
            STATUS=$(command git status ${FLAGS} 2> /dev/null | tail -n1)
        fi
        if [[ -n $STATUS ]]; then
            echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
        else
            echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
        fi
    }
fi

PROMPT='### $(build_prompt) '
